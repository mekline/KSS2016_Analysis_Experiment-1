#SUBJECT REMOVAL - FUSS OUT/AGE
#Remove subjects who are too young or fussed out of study
mydata <- mydata[(mydata$Age.Years > 2),]
#Remove fuss-outs (double check)
mydata <- mydata[(mydata$Subject != 5),] #Fuss outs
mydata <- mydata[(mydata$Subject != 8),]
mydata <- mydata[(mydata$Subject != 12),]
mydata <- mydata[(mydata$Subject != 18),] #Fuss outs
mydata <- mydata[(mydata$Subject != 20),]
mydata <- mydata[(mydata$Subject != 22),]
mydata <- mydata[(mydata$Subject != 30),]
mydata <- mydata[(mydata$Subject != 31),]
mydata <- mydata[(mydata$Subject != 32),]
mydata <- mydata[(mydata$Subject != 33),]
mydata <- mydata[(mydata$Subject != 34),]
######
#SUBJECT REMOVAL - PRETEST
#Calculate pretest scores and find out who should be removed for failure to pass
##Find causal/non side for Pilk pretest trial
mydata$Pilk.CausalSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Trial.A.1[i] == "Pilk.C") {
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.1[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.2[i]) }
}
mydata$Pilk.CausalSide <- as.factor(mydata$Pilk.CausalSide)
#levels(mydata$Pilk.CausalSide) <- c("right", "left")
mydata$Pilk.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Pilk.CausalSide[i] == "left") {
mydata$Pilk.NonSide[i] <- "right"
} else {
mydata$Pilk.NonSide[i] <- "left" }
}
#levels(mydata$Pilk.NonSide) <- c("right", "left")
mydata$Pilk.NonSide <- as.factor(mydata$Pilk.NonSide)
##Find causal/non side for Gorp pretest trial
mydata$Gorp.CausalSide <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Trial.B.1[i] == "Gorp.C") {
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.1[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.2[i]) }
}
mydata$Gorp.CausalSide <- as.factor(mydata$Gorp.CausalSide)
#levels(mydata$Gorp.CausalSide) <- c("left", "right")
mydata$Gorp.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Gorp.CausalSide[i] == "left") {
mydata$Gorp.NonSide[i] <- "right"
} else {
mydata$Gorp.NonSide[i] <- "left" }
}
mydata$Gorp.NonSide <- as.factor(mydata$Gorp.NonSide)
#levels(mydata$Gorp.NonSide) <- c("left", "right")
###
#HAND OUT PRETEST SCORES
###
##Try to give a score for Pilk.Touch.Score
mydata$Pilk.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.A.Ans[i])){
##Didn't do forced choice, check free response
mydata$Pilk.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Touch.A.1[i] + (1-mydata$Touch.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Touch.A.2[i] + (1-mydata$Touch.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Touch.Score[i] <- 1
} else {
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "Touching"){
##Did Forced choice
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "NotTouching"){
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Pilk.Causal.Score
mydata$Pilk.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.A.Ans[i])){
mydata$Pilk.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Cause.A.1[i] + (1-mydata$Cause.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Cause.A.2[i] + (1-mydata$Cause.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Cause.Score[i] <- 1
} else {
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDid"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Touch.Score
mydata$Gorp.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.B.Ans[i])){
##Didn't do forced choice, check free response
mydata$Gorp.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = mydata$Touch.B.1[i] + (1-mydata$Touch.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = mydata$Touch.B.2[i] + (1-mydata$Touch.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Touch.Score[i] <- 1
} else {
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "Touching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "NotTouching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Causal.Score
mydata$Gorp.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.B.Ans[i])){
mydata$Gorp.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = s + mydata$Cause.B.1[i] + (1-mydata$Cause.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = s + mydata$Cause.B.2[i] + (1-mydata$Cause.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Cause.Score[i] <- 1
} else {
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDid"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
}
}
##Calculate whether they pass pretest
for (i in 1:nrow(mydata)) {
mydata$Pass.Score[i] <- sum(mydata$Pilk.Touch.Score[i], mydata$Pilk.Cause.Score[i], mydata$Gorp.Touch.Score[i], mydata$Gorp.Cause.Score[i], na.rm=TRUE)
}
##Pass 1 and 6 manually because they got 3/4 of Gorp free questions correct,
##This was only for early pilot kids who didn't get forced choice Qs
mydata[mydata$Subject==1,]$Pass.Score <- 3
mydata[mydata$Subject==6,]$Pass.Score <- 3
##Keep passers only
mydata <- mydata[(mydata$Pass.Score > 2),]
################################################
#####DEMOGRAPHICS
mydata
names(mydata)
mydata$yesfirst
mydata$Yesfirst
#aggregate the "pilking"/"notpilking" choices in a new dataframe
sum.na.rm <- function(x) { sum(x,na.rm=T) }
NotPilkingScores <- aggregate(mydata$Choice.NC, by=list(mydata$Subject), sum.na.rm)
PilkingScores <- aggregate(mydata$Choice.C, by=list(mydata$Subject), sum.na.rm)
#Means & SEM for graphs!
mean(NotPilkingScores$x)
sd(NotPilkingScores$x)/sqrt(length(NotPilkingScores$x))
mean(PilkingScores$x)
sd(PilkingScores$x)/sqrt(length(PilkingScores$x))
NotPilkingFirst <- aggregate(mydata[mydata$YesFirst==0,]$Choice.NC, by=list(mydata[mydata$YesFirst==0,]$Subject), sum.na.rm)
NotPilkingSecond  <- aggregate(mydata[mydata$YesFirst==1,]$Choice.NC, by=list(mydata[mydata$YesFirst==1,]$Subject), sum.na.rm)
#NotPilkingScores, divided by when you got asked that question! For Review 4/30/15
NotPilkingFirst <- aggregate(mydata[mydata$Yesfirst==0,]$Choice.NC, by=list(mydata[mydata$Yesfirst==0,]$Subject), sum.na.rm)
NotPilkingSecond  <- aggregate(mydata[mydata$Yesfirst==1,]$Choice.NC, by=list(mydata[mydata$Yesfirst==1,]$Subject), sum.na.rm)
mean(NotPilkingFirst$x)
mean(NotPilkingScores$x)
mean(NotPilkingFirst$x)
mean(NotPilkingSecond$x)
mydata$Choice.NC
NotPilkingFirst <- aggregate(mydata[mydata$Yesfirst==0,]$Choice.C, by=list(mydata[mydata$Yesfirst==0,]$Subject), sum.na.rm)
NotPilkingSecond  <- aggregate(mydata[mydata$Yesfirst==1,]$Choice.C, by=list(mydata[mydata$Yesfirst==1,]$Subject), sum.na.rm)
mean(NotPilkingFirst$x)
mean(NotPilkingSecond$x)
NotPilkingFirst <- aggregate(mydata[mydata$Yesfirst==0,]$Choice.NC, by=list(mydata[mydata$Yesfirst==0,]$Subject), sum.na.rm)
NotPilkingSecond  <- aggregate(mydata[mydata$Yesfirst==1,]$Choice.NC, by=list(mydata[mydata$Yesfirst==1,]$Subject), sum.na.rm)
mean(NotPilkingFirst$x)
mean(NotPilkingSecond$x)
setwd("~/Dropbox/_Projects/Wugging/zWugging - Finished Experiments/2010 Forced Choice Wugging - TouchNoTouch/TVW-twoquestions-ANALYSIS/Analysis - Final Cogsci Submit")
#This reads in the *.dat data from a forced-choice
#experiment (TVW at the moment!)
#setwd("C:\\Users\\mekline\\Documents\\My Dropbox\\_Projects\\TransitiveVerbsWugging-FCW 2010\\Forced Choice\\TVW-twoquestions\\Analysis - Final Cogsci Submit")
setwd("/Users/mekline/Dropbox/_Projects/Wugging - Finished Experiments/2010 Forced Choice Wugging - TouchNoTouch/TVW-twoquestions-ANALYSIS/Analysis - Final Cogsci Submit")
#DATA LOADING & SHAPING
#libraries
library(reshape)
####TVW -from before automated touch trials
#Load in the data from the TVW files
mydata <- data.frame(NULL)
participants <- c(1,2,3,4,5,6,7,9,10,11,13,14,15,16,17) #fussed out & didn'trecord: 8, 12
for(f in participants) {
tryCatch({filename = paste('Data_full/TVW_', f, '.dat', sep='')}, finally="")
tmp <- read.table(filename, header=FALSE, sep=" ")
names(tmp) <- c("Subject", "Trial.Number", "Item.Number", "Item",
"First.Side", "Causal.Side", "Response.Causal", "Choice.Causal", "Response.NC", "Choice.NC", "Yesfirst")
mydata <- rbind(mydata, tmp)
}
#Load in the data about participants and pretest/touch performance
pdata <- data.frame(NULL)
pdata <- read.table('Participants_FCW.csv', header=TRUE, sep=',')
mydata <- merge(mydata, pdata, by=c("Subject"))
#Add correct 'touch' data onto the mydata dataframe
trial.numbers <- c(1,2,3,4)
#loop over trial numbers and add the touch data correctly
touchdata <- data.frame(NULL)
for(i in trial.numbers) {
tmp <- pdata[,c("Subject",paste("Item", i, sep="."),paste("Touching", i, sep="."))]
names(tmp) <- c("Subject", "Item", "Touching")
tmp$Trial.Number <- i
touchdata <- rbind(touchdata,tmp)
}
mydata <- merge(mydata,touchdata, by=c("Subject", "Item", "Trial.Number"), all.x = TRUE)
####TVW_new -from with automated touch trials
mydata2 <- data.frame(NULL)
participants <- c(19,21,23,24,25,26,27,28,29,35,36,37,38,39) #fussed out, bilingual, pilot: 18, 20, 22, 30-34,
for(f in participants) {
tryCatch({filename = paste('Data_full/TVW_', f, '.dat', sep='')}, finally="")
tmp <- read.table(filename, header=FALSE, sep=" ")
names(tmp) <- c("Subject", "Trial.Number", "Item.Number", "Item",
"First.Side", "Causal.Side", "Response.Causal", "Choice.Causal", "Response.NC", "Choice.NC", "Yesfirst", "Touch.Key", "Choice.T")
mydata2 <- rbind(mydata2, tmp)
}
##Relabel "Touching" data to match above
mydata2$Touching <- NA
mydata2[mydata2$Touch.Key=="z",]$Touching <- "left"
mydata2[mydata2$Touch.Key=="c",]$Touching <- "right"
mydata2$Touching <- as.factor(mydata2$Touching)
#Add the relevant participant data
mydata2 <- merge(mydata2, pdata, by=c("Subject"))
#Merge the two sets of data together
inter <- intersect(names(mydata), names(mydata2))
mydata <- subset(mydata, select=inter)
mydata2 <- subset(mydata2, select=inter)
mydata <- rbind(mydata, mydata2) #Probably doesn't work if some have extra columns - matches by first dataframe column names!
######
#SUBJECT REMOVAL - FUSS OUT/AGE
#Remove subjects who are too young or fussed out of study
mydata <- mydata[(mydata$Age.Years > 2),]
#Remove fuss-outs (double check)
mydata <- mydata[(mydata$Subject != 5),] #Fuss outs
mydata <- mydata[(mydata$Subject != 8),]
mydata <- mydata[(mydata$Subject != 12),]
mydata <- mydata[(mydata$Subject != 18),] #Fuss outs
mydata <- mydata[(mydata$Subject != 20),]
mydata <- mydata[(mydata$Subject != 22),]
mydata <- mydata[(mydata$Subject != 30),]
mydata <- mydata[(mydata$Subject != 31),]
mydata <- mydata[(mydata$Subject != 32),]
mydata <- mydata[(mydata$Subject != 33),]
mydata <- mydata[(mydata$Subject != 34),]
######
#SUBJECT REMOVAL - PRETEST
#Calculate pretest scores and find out who should be removed for failure to pass
##Find causal/non side for Pilk pretest trial
mydata$Pilk.CausalSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Trial.A.1[i] == "Pilk.C") {
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.1[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
mydata$Pilk.CausalSide[i] <- as.character(mydata$Side.A.2[i]) }
}
mydata$Pilk.CausalSide <- as.factor(mydata$Pilk.CausalSide)
#levels(mydata$Pilk.CausalSide) <- c("right", "left")
mydata$Pilk.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Pilk.CausalSide[i] == "left") {
mydata$Pilk.NonSide[i] <- "right"
} else {
mydata$Pilk.NonSide[i] <- "left" }
}
#levels(mydata$Pilk.NonSide) <- c("right", "left")
mydata$Pilk.NonSide <- as.factor(mydata$Pilk.NonSide)
##Find causal/non side for Gorp pretest trial
mydata$Gorp.CausalSide <- NA
for (i in 1:nrow(mydata)) {
if (mydata$Trial.B.1[i] == "Gorp.C") {
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.1[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
mydata$Gorp.CausalSide[i] <- as.character(mydata$Side.B.2[i]) }
}
mydata$Gorp.CausalSide <- as.factor(mydata$Gorp.CausalSide)
#levels(mydata$Gorp.CausalSide) <- c("left", "right")
mydata$Gorp.NonSide <- NULL
for (i in 1:nrow(mydata)) {
if (mydata$Gorp.CausalSide[i] == "left") {
mydata$Gorp.NonSide[i] <- "right"
} else {
mydata$Gorp.NonSide[i] <- "left" }
}
mydata$Gorp.NonSide <- as.factor(mydata$Gorp.NonSide)
#levels(mydata$Gorp.NonSide) <- c("left", "right")
###
#HAND OUT PRETEST SCORES
###
##Try to give a score for Pilk.Touch.Score
mydata$Pilk.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.A.Ans[i])){
##Didn't do forced choice, check free response
mydata$Pilk.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Touch.A.1[i] + (1-mydata$Touch.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Touch.A.2[i] + (1-mydata$Touch.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Touch.Score[i] <- 1
} else {
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "Touching"){
##Did Forced choice
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.A.Q[i] == "NotTouching"){
if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Pilk.Causal.Score
mydata$Pilk.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.A.Ans[i])){
mydata$Pilk.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.A.1[i] == "Pilk.C"){
s = s + mydata$Cause.A.1[i] + (1-mydata$Cause.A.2[i])
} else if (mydata$Trial.A.1[i] == "Pilk.NC"){
s = s + mydata$Cause.A.2[i] + (1-mydata$Cause.A.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Pilk.Cause.Score[i] <- 1
} else {
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDid"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.A.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.NonSide[i]){
mydata$Pilk.Cause.Score[i] <- 1
} else if (mydata$ForceCause.A.Ans[i] == mydata$Pilk.CausalSide[i]){
mydata$Pilk.Cause.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Touch.Score
mydata$Gorp.Touch.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceTouch.B.Ans[i])){
##Didn't do forced choice, check free response
mydata$Gorp.Touch.Score[i] <- NA
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = mydata$Touch.B.1[i] + (1-mydata$Touch.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = mydata$Touch.B.2[i] + (1-mydata$Touch.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Touch.Score[i] <- 1
} else {
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "Touching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
} else if (mydata$ForceTouch.B.Q[i] == "NotTouching"){
if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Touch.Score[i] <- 1
} else if (mydata$ForceTouch.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Touch.Score[i] <- 0
}
}
}
##Try to give a score for Gorp.Causal.Score
mydata$Gorp.Cause.Score <- NA
for (i in 1:nrow(mydata)) {
if (is.na(mydata$ForceCause.B.Ans[i])){
mydata$Gorp.Cause.Score[i] <- NA
##Didn't do force choice, check free response
s = 0
if (mydata$Trial.B.1[i] == "Gorp.C"){
s = s + mydata$Cause.B.1[i] + (1-mydata$Cause.B.2[i])
} else if (mydata$Trial.B.1[i] == "Gorp.NC"){
s = s + mydata$Cause.B.2[i] + (1-mydata$Cause.B.1[i])
}
##Did they get both right?
if (s == 2){
mydata$Gorp.Cause.Score[i] <- 1
} else {
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDid"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
} else if (mydata$ForceCause.B.Q[i] == "SarahDidnt"){
if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.NonSide[i]){
mydata$Gorp.Cause.Score[i] <- 1
} else if (mydata$ForceCause.B.Ans[i] == mydata$Gorp.CausalSide[i]){
mydata$Gorp.Cause.Score[i] <- 0
}
}
}
##Calculate whether they pass pretest
for (i in 1:nrow(mydata)) {
mydata$Pass.Score[i] <- sum(mydata$Pilk.Touch.Score[i], mydata$Pilk.Cause.Score[i], mydata$Gorp.Touch.Score[i], mydata$Gorp.Cause.Score[i], na.rm=TRUE)
}
##Pass 1 and 6 manually because they got 3/4 of Gorp free questions correct,
##This was only for early pilot kids who didn't get forced choice Qs
mydata[mydata$Subject==1,]$Pass.Score <- 3
mydata[mydata$Subject==6,]$Pass.Score <- 3
##Keep passers only
mydata <- mydata[(mydata$Pass.Score > 2),]
################################################
#####DEMOGRAPHICS
#means days old - Note, make sure it counts subjects, not trials!
collapsed <- mydata[!duplicated(mydata$Subject),]
mean(aggregate(collapsed$Days.Old, by=list(collapsed$Subject), mean))
foo <- subset(collapsed, select=c("Subject", "Days.Old"))
min(foo$Days.Old)
max(foo$Days.Old)
#Number of girls - Note, make sure it counts subjects, not trials!
foo <- subset(collapsed, select=c("Subject", "Gender"))
nrow(foo[foo$Gender=="F",])
nrow(foo[foo$Gender=="M",])
################################################
#######ANALYSIS!
#aggregate the "pilking"/"notpilking" choices in a new dataframe
sum.na.rm <- function(x) { sum(x,na.rm=T) }
NotPilkingScores <- aggregate(mydata$Choice.NC, by=list(mydata$Subject), sum.na.rm)
PilkingScores <- aggregate(mydata$Choice.C, by=list(mydata$Subject), sum.na.rm)
#NotPilkingScores, divided by when you got asked that question! For Review 4/30/15
NotPilkingFirst <- aggregate(mydata[mydata$Yesfirst==0,]$Choice.NC, by=list(mydata[mydata$Yesfirst==0,]$Subject), sum.na.rm)
NotPilkingSecond  <- aggregate(mydata[mydata$Yesfirst==1,]$Choice.NC, by=list(mydata[mydata$Yesfirst==1,]$Subject), sum.na.rm)
mean(NotPilkingFirst$x)
mean(NotPilkingSecond$x)
1-0.3809
1-0.542
wilcox.test(NotPilkingFirst$x, NotPilkingSecond$x, exact=FALSE, conf.int=TRUE)
